// Apply Gradle plugins
buildscript {
    repositories {
        mavenCentral()
        maven { url 'https://repo.spongepowered.org/maven' }
        maven { url 'https://plugins.gradle.org/m2' }
    }
    dependencies {
        classpath 'org.spongepowered:plugin-meta:0.1.1'
        classpath 'org.spongepowered:SpongeGradle:0.5.1'
        classpath 'gradle.plugin.net.minecrell:licenser:0.1.3'
        classpath 'gradle.plugin.net.minecrell:gitpatcher:0.8'
        classpath 'gradle.plugin.blue.lapis:methodremapper:0.2'
        classpath 'com.github.jengelman.gradle.plugins:shadow:1.2.3'
    }
}

apply plugin: 'org.spongepowered.plugin'
apply plugin: 'checkstyle'
apply plugin: 'net.minecrell.licenser'
apply plugin: 'net.minecrell.gitpatcher'
apply plugin: 'blue.lapis.methodremapper'
apply plugin: 'com.github.johnrengelman.shadow'

defaultTasks 'clean', 'licenseFormat', 'build'

// Project information
version = '1.0.0-SNAPSHOT'

apply from: 'gradle/deploy.gradle'

allprojects {
    group = 'blue.lapis'

    sourceCompatibility = '1.8'
    targetCompatibility = '1.8'

    repositories {
        mavenCentral()
    }
}

// Project repositories
repositories {
    jcenter()
    maven {
        name = 'lapis'
        url = 'http://repo.lapis.blue/releases'
    }
}

patches {
    submodule = 'lib/Bukkit'
    target = file('Porekit')
    patches = file('patches')
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'eclipse'
    apply plugin: 'idea'
}

project('Porekit') {
    apply from: rootProject.file('bukkit.gradle')
    compileJava.dependsOn rootProject.tasks.applyPatches
}

configurations {
    shadow
    compile {
        extendsFrom shadow
    }
    shadowRuntime {
        extendsFrom shadow
    }
    runtime {
        extendsFrom shadowRuntime
    }
}

// Project dependencies
dependencies {
    implementation project(':ap')

    // Updated to SpongeAPI 7.4.0
    implementation 'org.spongepowered:spongeapi:7.4.0'
    runtimeOnly 'blue.lapis.methodremapper:tweaker:0.1'

    shadow project('Porekit')
    shadowRuntimeOnly 'mysql:mysql-connector-java:5.1.38'

    testImplementation 'junit:junit:4.12'
    testImplementation 'org.hamcrest:hamcrest-library:1.3'
    testImplementation 'org.mockito:mockito-core:1.10.19'
    testRuntimeOnly 'org.slf4j:slf4j-simple:1.7.13'
}

allprojects {
    // Read source files using UTF-8
    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
    }
}

tasks.withType(JavaCompile) {
    options.compilerArgs += [
            '-Xlint:all',
            '-Xlint:-deprecation'
    ]
}

test {
    testLogging {
        showStandardStreams = true
        exceptionFormat = 'full'
        events 'skipped'
    }
}

compileTestJava {
    options.compilerArgs += '-proc:none'
}

// Remap the older Bukkit methods
remap {
    inputTask = shadowJar
}

jar {
    manifest {
        attributes(
                'Specification-Title': 'Bukkit',
                'Specification-Version': project('Porekit').version,
                'Specification-Vendor': 'SpigotMC',
                'Implementation-Title': project.name,
                'Implementation-Version': project.version + versionSuffix,
                'Implementation-Vendor': 'Lapis',
                'Main-Class': 'blue.lapis.pore.util.InfoMain'
        )
    }
}

shadowJar {
    classifier = ''
    exclude 'remap.txt'

    configurations = [project.configurations.shadowRuntime]
    dependencies {
        exclude dependency('com.google.guava:guava')
        exclude dependency('com.google.code.gson:gson')
        exclude dependency('org.yaml:snakeyaml')
    }
}

configure([project, project(':ap')]) {
    apply plugin: 'net.minecrell.licenser'

    // License header formatting
    license {
        header rootProject.file('LICENSE')

        include '**/*.java'
        exclude '**/lib/**'

        sourceSets = project.sourceSets
        ignoreFailures false
    }
}

checkstyle {
    toolVersion = '6.14.1'
    configProperties = [
            'basedir': project.projectDir,
            'severity': 'warning'
    ]
    configFile = file('etc/checkstyle.xml')
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.11'
}
